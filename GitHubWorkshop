github workshop Windows or Linux

-------------------------------------------------------------------------------------------

--> desktop GUI git

config user account

-- git commit username and email
git config --global user.email "email"
git config --global user.name "name"

-- create ssh key
ssh-keygen  -t rsa -b 4096

-- go to github
Settings -> SSH and GPG keys -> New key (Paste public key)

-- test the ssh key ((tests the key connectivity))
ssh git@github.com 


-------------------------------------------------------------------------------------------
-- set up git
-- initalizes git creating a repository
git init 

-- test connectivity, status of files
git status

-------------------------------------------------------------------------------------------

-- git file manipulation

-- add to the repository
git add "FILENAME1" "FileNameN"
git add "Wildcards (* - all files or . - this directory)"

-- commit ( multiple files? Multiple additions to commit required)
git commit <FILENAME>  --> Goes to text editor
enter title, and information (more change information than just a quick oneliner)
--Usual information --> Why is something done, What its done, etc

--OR--
-- commit (one liner)
git commit -m "messages"

-- Git doesnt track filename changes so Renaming, or moving must occur --
git mv <source> <destination>

-- Delete file
git rm <filename> <filenameN>

-- stop trackign files
git rm -cached <FILENAME>


-------------------------------------------------------------------------------------------


-- Branching
-- stable code safe --> Branch can be changed and modified keeping the branch safe
-- master is stable production code 
-- develope branching is a different branch --> Can branch from this branch
-- release branch for testing/marketing/QA/Saves release branch between developing and master

-- List local branches
-- * is the branch you're currently on
-- highlighted in green is the branch you're in
git branch

-- Create branch
git branch developement

-- switch to branch
git checkout <BRANCHNAME>

-- Commit changes prior to switching branches --> You could lose your info!

-- merge changes
-- Simple projects --> merges locally
git merge <Branchname>

-- The branch you're in you specify the branch you want to merge, the other branch is prioritized (On master "git merge developement" merge developement to master)




-------------------------------------------------------------------------------------------
-- Pull
--- merges the remote repository with local

--Push
-- Merge local repoisitory with remote
-- LIkely do this around a milestone or at the end of the day

--Fetch
-- Get changes from remote but doesn't merge

---------------------------------
-- create a remote reposity
git remote add <name:Default "origin"> git@github.com:username/repo

-- push for the first time
git push -u origin master

-- branch pushing
git push --set-upstream origin developement 

